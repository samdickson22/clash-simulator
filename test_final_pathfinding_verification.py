#!/usr/bin/env python3

import sys
sys.path.append('src')

from clasher.battle import BattleState
from clasher.arena import Position
from clasher.entities import Troop, Building
from clasher.data import CardStats

def test_final_pathfinding_verification():
    """Final verification that all pathfinding issues are resolved"""
    
    print("=== FINAL PATHFINDING VERIFICATION ===")
    
    battle = BattleState()
    
    # Simulate post-tower-destruction scenario
    battle.players[1].left_tower_hp = 0
    print("‚úì Tower destroyed - advanced pathfinding active")
    
    card_stats = CardStats(
        name="Knight",
        id=1,
        mana_cost=3,
        rarity="Common"
    )
    
    target = Building(
        id=999,
        position=Position(9.0, 25.0),
        player_id=1,
        card_stats=card_stats,
        hitpoints=1000,
        max_hitpoints=1000,
        damage=100,
        range=5.0,
        sight_range=7.0
    )
    
    # Test different starting positions that previously caused issues
    test_scenarios = [
        {"pos": Position(9.0, 14.0), "desc": "Center position (where circular movement occurred)"},
        {"pos": Position(6.0, 12.0), "desc": "Left-center position"}, 
        {"pos": Position(12.0, 12.0), "desc": "Right-center position"},
        {"pos": Position(8.0, 13.0), "desc": "Near-center position"},
    ]
    
    all_scenarios_passed = True
    
    for scenario in test_scenarios:
        pos = scenario["pos"]
        desc = scenario["desc"]
        
        print(f"\n--- Testing: {desc} ---")
        print(f"Starting position: ({pos.x}, {pos.y})")
        
        troop = Troop(
            id=1,
            position=pos,
            player_id=0,
            card_stats=card_stats,
            hitpoints=1400,
            max_hitpoints=1400,
            damage=167,
            range=1.0,
            sight_range=5.5,
            speed=60,
            is_air_unit=False
        )
        
        # Test pathfinding targets are reachable
        pathfind_target = troop._get_pathfind_target(target, battle)
        target_walkable = battle.arena.is_walkable(pathfind_target)
        
        print(f"Pathfind target: ({pathfind_target.x}, {pathfind_target.y})")
        print(f"Target walkable: {target_walkable}")
        
        if not target_walkable:
            print(f"‚ùå FAIL: Pathfind target is not walkable!")
            all_scenarios_passed = False
            continue
        
        # Check if target is the problematic center bridge
        if pathfind_target.x == 9.0 and pathfind_target.y == 16.0:
            print(f"‚ùå FAIL: Still targeting problematic center bridge!")
            all_scenarios_passed = False
            continue
        
        # Simulate a few movement steps to check for progress
        initial_pos = Position(troop.position.x, troop.position.y)
        movement_successful = True
        
        for step in range(3):
            # Get current target
            current_target = troop._get_pathfind_target(target, battle)
            
            # Calculate movement
            dx = current_target.x - troop.position.x
            dy = current_target.y - troop.position.y
            distance = (dx * dx + dy * dy) ** 0.5
            
            if distance > 0:
                # Try to move 1 tile towards target
                move_distance = min(1.0, distance)
                move_x = (dx / distance) * move_distance
                move_y = (dy / distance) * move_distance
                
                new_pos = Position(troop.position.x + move_x, troop.position.y + move_y)
                
                if battle.arena.is_walkable(new_pos):
                    troop.position = new_pos
                else:
                    movement_successful = False
                    break
        
        # Check if troop made progress
        final_pos = troop.position
        total_movement = initial_pos.distance_to(final_pos)
        
        print(f"Movement distance: {total_movement:.2f} tiles")
        
        if not movement_successful:
            print(f"‚ùå FAIL: Movement blocked during simulation")
            all_scenarios_passed = False
        elif total_movement < 0.5:
            print(f"‚ùå FAIL: Insufficient movement progress")
            all_scenarios_passed = False
        else:
            print(f"‚úÖ PASS: Successful pathfinding and movement")
    
    # Final summary
    print(f"\n=== FINAL SUMMARY ===")
    if all_scenarios_passed:
        print(f"üéâ ALL PATHFINDING ISSUES RESOLVED!")
        print(f"‚úÖ No more circular movement around bridges")
        print(f"‚úÖ All pathfind targets are reachable")
        print(f"‚úÖ Troops can successfully cross rivers after tower destruction")
        print(f"‚úÖ Advanced pathfinding uses proper bridge selection")
    else:
        print(f"‚ùå Some pathfinding issues remain")
    
    return all_scenarios_passed

if __name__ == "__main__":
    test_final_pathfinding_verification()